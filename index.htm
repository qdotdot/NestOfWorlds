<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8" />
        <title>Nest of The Worlds</title>
        <!-- Production -->
        <!--
        <script src="../../src/mootools/mootools-core-1.3-full-nocompat-yc.js"></script>
        <script src="../../src/audiolet/Audiolet.min.js"></script>
        -->

        <!-- Development -->
        <script src="../Audiolet/src/mootools/mootools-core-1.3-full-nocompat.js"></script>
        <script src="../Audiolet/src/audiolet/Audiolet.js"></script>

        <!-- Common -->
        <script src="js/audiolet_app.js"></script>
<script type="application/javascript">


    window.addEvent("domready", function() {
      function NearNeighbour(x, y) {
	this.val = 1.0;
	this.x = x; 
	this.y = y;
      }

      function FarNeighbour(x, y) {
	this.val = 0.3;
	this.x = x; 
	this.y = y;
      }
      
  
      var Neighbours = new Array();
      Neighbours.push(new NearNeighbour(-1, 1));
      Neighbours.push(new NearNeighbour(0, 1));
      Neighbours.push(new NearNeighbour(1, 0));
      Neighbours.push(new NearNeighbour(1, -1));
      Neighbours.push(new NearNeighbour(0, -1));
      Neighbours.push(new NearNeighbour(-1, 0));

      Neighbours.push(new FarNeighbour(-1, 2));
      Neighbours.push(new FarNeighbour(1, 1));
      Neighbours.push(new FarNeighbour(2, -1));
      Neighbours.push(new FarNeighbour(1, -2));
      Neighbours.push(new FarNeighbour(-1, -1));
      Neighbours.push(new FarNeighbour(-2, 1));
      

      function HexNode(life, x, y)
      {
	this.life = life;
	this.x = x;
	this.y = y;
	this.val = 0;
	this.newval = 0;
      
	this.update = function() {
	  var sum = 0;
	  for (var i=0; i<Neighbours.length; i++) {
	    if 
	      ((this.life.HexArray[this.x+Neighbours[i].x] != undefined) && 
	      (this.life.HexArray[this.x+Neighbours[i].x][this.y+Neighbours[i].y] != undefined) &&
	      (this.life.HexArray[this.x+Neighbours[i].x][this.y+Neighbours[i].y].val == 1))
	      sum += Neighbours[i].val;
	  }

//	  console.log (sum);

	  this.newval = this.val;

	  if ((this.val == 1) && (sum < 2.0))
	    this.newval = 0;
	  if ((this.val == 1) && (sum > 3.3))
	    this.newval = 0;

	  if ((this.val == 0) && (sum >=2.3) && (sum <= 2.9))
	    this.newval = 1;
	}
	this.swap = function () {
	  this.val = this.newval;
	}
      }

      function HexLife()
      {
	this.dimx = 45;
	this.dimy = 45;
	this.offx = 22;
	this.offy = 22;

	this.HexArray = new Array(this.dimx);
	
	

	for (var i=0; i< this.dimx; i++) {
	  this.HexArray[i] = new Array(this.dimy);
	}

	this.foreach = function(what) {
	  for (var i=0; i< this.dimx; i++) {
	    for (var j=0; j< this.dimy; j++) {
	      what(this, i, j);
	    }
	  }
	}

	this.foreach( function(hl, x, y) { hl.HexArray[x][y] = new HexNode(hl, x, y) });

	this.get = function(x ,y) {
	  return this.HexArray[x+this.offx][y+this.offy];
	}

	this.coords = function(x, y) {
	  var rval = new Object;

	  rval.x = x + y/2;
	  rval.y = y*0.8;

	  return rval;
	}

	this.drawpoint = function(ctx, x, y) {
	  ctx.beginPath();
	  ctx.arc(x, y, 10, 0, Math.PI*2, true);
	  ctx.closePath();
	  ctx.fill();
	}

	this.seed = function() {
	  this.foreach( function(hl, x, y) { hl.HexArray[x][y].val = 0 } );
	  this.HexArray[this.offx][this.offy].val = 1;
	  this.HexArray[this.offx+1][this.offy].val = 1;
	  this.HexArray[this.offx+2][this.offy].val = 1;
	  this.HexArray[this.offx][this.offy+1].val = 1;
	  this.HexArray[this.offx][this.offy+2].val = 1;
	  this.HexArray[this.offx+1][this.offy+1].val = 1;
	  return this;
	}

	this.update = function() {
	  this.foreach( function(hl, x, y) { hl.HexArray[x][y].update() } );
	  this.foreach( function(hl, x, y) { hl.HexArray[x][y].swap() } );
	  return this;
	}

	this.step = function(ctx) {
	  this.update();
	  this.redraw(ctx);
	}

	this.redraw = function(ctx) {
	  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);

	  this.foreach( function(hl, x, y) { 
	      var coords = hl.coords(x, y);
	      if (hl.HexArray[x][y].val == 1)
		hl.drawpoint(ctx, coords.x * 20, coords.y * 20);
	  });
	}

	this.play = function (ctx) {
	  var start = new Date().getTime();
	  this.step(ctx);
	  var end = new Date().getTime();
	  console.log("Execution time: " + (end-start));
	  this.timer = setTimeout("document.hl.play(document.getElementById('hexcanvas').getContext('2d'))", 1000);
	}

	this.stop = function () {
	  clearTimeout(this.timer);
	}

      }

      var canvas = document.getElementById("hexcanvas");
      var ctx = canvas.getContext("2d");


      document.hl = new HexLife();
    });
</script>
        <link rel="stylesheet" href="css/main.css" />
    </head>
    <body>
      <canvas id="hexcanvas" width="600" height="600"></canvas>
      <a href="#" onClick="document.hl.seed()"> Seed </a>
      <a href="#" onClick="document.hl.redraw(document.getElementById('hexcanvas').getContext('2d'))"> Redraw </a>
      <a href="#" onClick="document.hl.step(document.getElementById('hexcanvas').getContext('2d'))"> Step </a>
      <a href="#" onClick="document.hl.play(document.getElementById('hexcanvas').getContext('2d'))"> Play </a>
      <a href="#" onClick="document.hl.stop()"> Pause </a>
    </body>
</html>


